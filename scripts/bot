#!/usr/bin/env python3
import logging
import os
import sys
import typing

from dotenv import load_dotenv
from discord import Member
from discord.ext.commands import NoPrivateMessage
from discord.ext.commands.errors import BadArgument, MissingRequiredArgument, MemberNotFound

sys.path.insert(1, os.path.dirname(os.path.dirname(__file__)))
from erato import *
from erato.model import movesdb

# load our environment
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
LEVEL = getattr(logging, os.getenv('LOG_LEVEL', 'INFO'))

#configure logging
logging.basicConfig(encoding='utf-8', level=LEVEL,
        format='%(asctime)s:%(levelname)s:%(name)s: %(message)s')
logger = logging.getLogger(__name__)

#configure our bot
bot = Bot(command_prefix="!")

@bot.event
async def on_ready():
    logging.info(f'Logged in as {bot.user}')

@bot.check
async def globally_block_dms(ctx):
    if ctx.guild is None:
        raise NoPrivateMessage("This command cannot be used in private messages.")
    return True

@bot.command(help="Roll the dice")
async def roll(ctx, stat: typing.Optional[valid_stat], modifier: typing.Optional[int]):
    msg = ctx.roll(stat, modifier)
    await ctx.send(msg)

@roll.error
async def roll_error(ctx, error):
    if isinstance(error, BadArgument):
        if isinstance(error.__cause__, Invalid):
            await ctx.send(error.__cause__)
    else:
        raise error

@bot.command(help="Create a character object for yourself")
async def create(ctx):
    try:
        ctx.create_character()
        await ctx.send('Character created!')
    except CharacterExists:
        await ctx.send(f'You already have a character!')

@bot.command(aliases=('sheet',), help="View your or another character's stats")
async def stats(ctx, member: typing.Optional[str]):
    m = await ctx.maybe_member(member)
    try:
        msg = f'Stats for {m.display_name}:'
        for (stat, value) in ctx.list_stats(m):
            msg += f'\n\t{stat.capitalize()}:\t{value}'
        await ctx.send(msg)
    except Character.DoesNotExist:
        await ctx.send(f"You don't have a character yet!")

@bot.command(help="Set a stat")
async def set(ctx, stat: valid_stat, value: int):
    try:
        ctx.set_character_attribute(stat, value)
        await ctx.send(f'Set!')

    except Character.DoesNotExist:
        await ctx.send(f"You don't have a character yet!")

@set.error
async def set_error(ctx, error):
    if isinstance(error, BadArgument):
        if isinstance(error.__cause__, Invalid):
            await ctx.send(error.__cause__)
        else:
            await ctx.send(f'Value must be an integer.')
    else:
        raise error

@bot.group(help="Commands to deal with strings, see !help string")
async def string(ctx):
    if ctx.invoked_subcommand is None:
        await ctx.send('Invalid strings command passed.')

@string.command()
async def give(ctx, target: Member):
    try:
        total = ctx.give_string(target)
        strings = 'strings'
        if total == 1:
            strings = 'string'
        await ctx.send(f'{target.display_name} now has {total} {strings} on {ctx.message.author.display_name}.')
    except Character.DoesNotExist:
        await ctx.send('You both need to have characters to give a string.')

@string.command()
async def spend(ctx, target: Member):
    try:
        total = ctx.spend_string(target)
        strings = 'strings'
        if total == 1:
            strings = 'string'
        await ctx.send(f'String spent! {ctx.message.author.display_name} now has {total} {strings} on {target.display_name}.')
    except Character.DoesNotExist:
        await ctx.send('You both need to have characters to spend a string.')
    except NoStrings:
        await ctx.send(f'You do not have strings on {target.display_name}.')

@string.command(aliases=('ls','l','look'))
async def list(ctx, member: typing.Optional[str]):
    owner = await ctx.maybe_member(member)
    msg = f'Strings for {owner.display_name}:'
    for (member, count) in ctx.list_strings(owner):
        if member is None:
            member = ctx.message.author
        msg += f'\n\t{member.display_name}:\t{count}'
    await ctx.send(msg)

@list.error
async def strings_error(ctx, error):
    if isinstance(error, MissingRequiredArgument):
        await ctx.send('Whose strings do you want to see?')
    elif isinstance(error, MemberNotFound):
        await ctx.send(error)
    else:
        raise error

@bot.command(help='Lists moves and their descriptions')
async def moves(ctx, move: typing.Optional[str]):
    if move is not None:
        keys = [key for key in movesdb.moves
                if move.lower() in key.lower()]
        if len(keys) == 0:
            await ctx.send(f'no moves match "{move}"')
            return
    else:
        keys = [key for key in movesdb.moves]

    if len(keys) == 1:
        m = movesdb.moves[keys[0]]
        parts = [m['description']]
        if m.get('up') is not None:
            parts.append(f"(10+): {m['up']}")
        if m.get('mixed') is not None:
            parts.append(f"(7-9): {m['mixed']}")
        if m.get('all') is not None:
            parts.append(f"{m['all']}")
        text = "\n".join(parts)
        await ctx.send(f'```{text}```')

    else:
        list = '\n\t'.join(k.title() for k in sorted(keys))
        await ctx.send(f"""```
!moves [move]

Use this command with the name of a move to see the listing for that move. You do not have to provide the entire move name, just a word that is unique to it (e.g. '!moves list advance' for 'String Advance'). You can also quote the entire name (e.g. '!moves list "end of session"').

Available moves: \n\t{list}```""")


# run
bot.run(TOKEN)
