#!/usr/bin/env python3
import logging
import os
import sys
import typing

from dotenv import load_dotenv
from discord.ext.commands import NoPrivateMessage
from discord.ext.commands.errors import BadArgument

sys.path.insert(1, os.path.dirname(os.path.dirname(__file__)))
import erato

# load our environment
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
LEVEL = getattr(logging, os.getenv('LOG_LEVEL', 'INFO'))

#configure logging
logging.basicConfig(encoding='utf-8', level=LEVEL,
        format='%(asctime)s:%(levelname)s:%(name)s: %(message)s')
logger = logging.getLogger(__name__)

#configure our bot
bot = erato.Bot(command_prefix="!")

@bot.check
async def globally_block_dms(ctx):
    if ctx.guild is None:
        raise NoPrivateMessage("This command cannot be used in private messages.")
    return True

@bot.command()
async def roll(ctx, ndice: typing.Optional[int] = 2, nsides: typing.Optional[int] = 6):
    msg = ctx.roll(ndice, nsides)
    await ctx.send(msg)

@bot.command()
async def hello(ctx):
    await ctx.send(f'Hello, {ctx.message.author.id} on {ctx.guild.id}!')

@bot.group()
async def character(ctx):
    pass

@character.command()
async def create(ctx):
    try:
        ctx.create_character()
        await ctx.send(f'Created your character, {ctx.message.author.nick}!')
    except erato.CharacterExists:
        await ctx.send(f'You already have a character, {ctx.message.author.nick}!')

@character.command()
async def stat(ctx, stat: erato.valid_stat, value: int):
    try:
        ctx.set_character_attribute(stat, value)
        await ctx.send(f'Set {stat} to {value} for you, {ctx.message.author.nick}.')
    except erato.Character.DoesNotExist:
        await ctx.send(f"You don't have a character yet, {ctx.message.author.nick}!")

@stat.error
async def stat_error(ctx, error):
    if isinstance(error, BadArgument):
        if isinstance(error.__cause__, erato.InvalidStat):
            await ctx.send('Stat must be one of: daring, grace, heart, wit, or spirit.')
        else:
            await ctx.send('Value must be an integer.')
    else:
        raise error

@character.command()
async def condition(ctx, cond: erato.valid_condition, value: bool):
    try:
        ctx.set_character_attribute(cond, value)
        await ctx.send(f'Set {cond} to {value} for you, {ctx.message.author.nick}.')
    except erato.Character.DoesNotExist:
        await ctx.send(f"You don't have a character yet, {ctx.message.author.nick}!")

@condition.error
async def condition_error(ctx, error):
    if isinstance(error, BadArgument):
        if isinstance(error.__cause__, erato.InvalidCondition):
            await ctx.send('Stat must be one of: angry, frightened, guilty, hopeless, or insecure.')
        else:
            await ctx.send('Value must be true or false.')
    else:
        raise error

# run
bot.run(TOKEN)
