#!/usr/bin/env python3
import logging
import os
import sys
import typing

from dotenv import load_dotenv
from discord import Member
from discord.ext.commands import NoPrivateMessage
from discord.ext.commands.errors import BadArgument

sys.path.insert(1, os.path.dirname(os.path.dirname(__file__)))
from erato import *

# load our environment
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
LEVEL = getattr(logging, os.getenv('LOG_LEVEL', 'INFO'))

#configure logging
logging.basicConfig(encoding='utf-8', level=LEVEL,
        format='%(asctime)s:%(levelname)s:%(name)s: %(message)s')
logger = logging.getLogger(__name__)

#configure our bot
bot = Bot(command_prefix="!")

@bot.event
async def on_ready():
    logging.info(f'Logged in as {bot.user}')

@bot.check
async def globally_block_dms(ctx):
    if ctx.guild is None:
        raise NoPrivateMessage("This command cannot be used in private messages.")
    return True

@bot.command()
async def roll(ctx, trait: valid_trait, modifier: typing.Optional[int] = 0):
    msg = ctx.roll(trait, modifier)
    await ctx.send(msg)

@roll.error
async def roll_error(ctx, error):
    if isinstance(error, BadArgument):
        if isinstance(error.__cause__, Invalid):
            await ctx.send(error.__cause__)
    else:
        raise error

@bot.command()
async def hello(ctx):
    await ctx.send(f'Hello, {ctx.message.author.id} on {ctx.guild.id}!')

@bot.group(aliases=('char', 'ch'))
async def character(ctx):
    pass

@character.command()
async def create(ctx):
    try:
        ctx.create_character()
        await ctx.send('Character created!')
    except CharacterExists:
        await ctx.send(f'You already have a character!')

@character.command(aliases=('sheet','sh','st'))
async def stats(ctx, member: typing.Optional[Member]):
    await ctx.display_stats(member)

@character.command()
async def set(ctx, trait: valid_trait, value: int):
    try:
        ctx.set_character_attribute(trait, value)
        await ctx.send(f'Set!')

    except Character.DoesNotExist:
        await ctx.send(f"You don't have a character yet!")

@set.error
async def set_error(ctx, error):
    if isinstance(error, BadArgument):
        if isinstance(error.__cause__, Invalid):
            await ctx.send(error.__cause__)
        else:
            await ctx.send(f'Value must be an integer.')
    else:
        raise error

# run
bot.run(TOKEN)
