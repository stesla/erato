#!/usr/bin/env python3
import logging
import os
import sys
import typing

from dotenv import load_dotenv
from discord.ext.commands import NoPrivateMessage
from discord.ext.commands.errors import BadArgument

sys.path.insert(1, os.path.dirname(os.path.dirname(__file__)))
from erato import *

# load our environment
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')
LEVEL = getattr(logging, os.getenv('LOG_LEVEL', 'INFO'))

#configure logging
logging.basicConfig(encoding='utf-8', level=LEVEL,
        format='%(asctime)s:%(levelname)s:%(name)s: %(message)s')
logger = logging.getLogger(__name__)

#configure our bot
bot = Bot(command_prefix="!")

@bot.check
async def globally_block_dms(ctx):
    if ctx.guild is None:
        raise NoPrivateMessage("This command cannot be used in private messages.")
    return True

@bot.command()
async def roll(ctx, ndice: typing.Optional[int] = 2, nsides: typing.Optional[int] = 6):
    msg = ctx.roll(ndice, nsides)
    await ctx.send(msg)

@bot.command()
async def hello(ctx):
    await ctx.send(f'Hello, {ctx.message.author.id} on {ctx.guild.id}!')

@bot.group()
async def character(ctx):
    pass

@character.command()
async def create(ctx):
    try:
        ctx.create_character()
        await ctx.send(f'Created your character, {ctx.nick}!')
    except CharacterExists:
        await ctx.send(f'You already have a character, {ctx.nick}!')

async def set_attribute(ctx, attribute, value):
    try:
        ctx.set_character_attribute(attribute, value)
        await ctx.send(f'Set, {ctx.nick}!')
    except Character.DoesNotExist:
        await ctx.send(f"You don't have a character yet, {ctx.nick}!")

async def set_attribute_error(ctx, error, attribute_type, valid_attributes, valid_value):
    if isinstance(error, BadArgument):
        if isinstance(error.__cause__, Invalid):
            valid = ', '.join(valid_values)
            await ctx.send(f'{attribute_type} must be one of: {valid}.')
        else:
            await ctx.send(f'Value must be {valid_value}.')
    else:
        raise error


@character.command()
async def trait(ctx, trait: valid(TRAITS), value: int):
    await set_attribute(ctx, trait, value)

@trait.error
async def trait_error(ctx, error):
    await set_attribute_error(ctx, error, 'Trait', TRAITS, 'an integer')

@character.command()
async def condition(ctx, condition: valid(CONDITIONS), value: bool):
    await set_attribute(ctx, condition, value)

@condition.error
async def condition_error(ctx, error):
    await set_attribute_error(ctx, error, 'Condition', CONDITIONS, 'true or false')

# run
bot.run(TOKEN)
